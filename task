#!/usr/bin/env perl

use Modern::Perl;
use Pod::Usage;
use Time::Seconds;
use Try::Tiny;
use Data::Dumper;

use FindBin;
use lib "$FindBin::RealBin/lib";

use Task::List;
use Task::Output;
use Task::Log;

use constant COMMANDS => [ qw/man help start stop push pop pause resume reset current list flush time summary status dump/ ];

=head1 NAME

  task - Simple task timer

=head1 SYNOPSIS

  task start bug fix           # start a timer
  task start another bug fix   # stop the first and start a new one
  task stop                    # stop the second timer
  task start a third bug fix   # start a third
  task push part 1             # start a sub-timer without stopping the running timer
  task pop                     # stop the sub timer
  task pop                     # stop the third timer

=head1 COMMANDS

=head2 OVERVIEW

The general syntax is

  task [command] [args...]

where command is one of

  start [label]    - stop all timers on the stack and start labeled timer 
  stop             - stop all timers on the stack
  push [label]     - start a timer/sub-timer
  pop              - stop the current timer/sub-timer
  pop [label]      - stop sub-timers up to and including the labeled timer
  pause            - pause all timers
  resume           - resume paused timers
  reset [label]    - reset a timer
  current          - list the currently running timer or sub-timer
  list             - list all timers
  flush            - archive timers and start over
  time             - list the current time
  status           - list the current task as well as time
  summary          - list all tasks and times

Specific help for commands are available via

  task help [command]

The full man page is available via

  task man

=cut

{
    no strict 'refs';
    my $command = shift @ARGV;
    $command ~~ COMMANDS ? $command->(@ARGV) : pod2usage( -verbose => 1 );
}

# read the log
sub sync {
    Task::List::add $_->{time}, $_->{command}, $_->{label} for Task::Log::lines;
}

# returns pretty format of time
sub pretty_time {
    my $time = new Time::Seconds shift;
    return $time->pretty;
}

#returns a pretty format for a task
sub pretty_task {
    my $task = shift;
    return $task->{label} . " (" . pretty_time($task->{time}) . ")";
}

=head2 man

Get the full man page.

  task man

=cut
sub man {
    pod2usage( -verbose => 2 );
}

=head2 help

Get help for one of the commands.

  task help [command]

=cut
sub help {
    my ($command) = @_;
    pod2usage( -verbose => 99, -sections => "COMMANDS/" . ($command ~~ COMMANDS ? $command : "OVERVIEW") );
}

=head2 start

Start the timer for a new or existing task.

  task start [task name]

=cut
sub start {
    note "start", shift;
    sync;
    respond_long "Started " . pretty_task Task::List::last;
}

=head2 stop

Stop the timer for the current task or subtask.

  task stop

=cut
sub stop {
    note "stop";
    sync;
    respond_long "Stopped " . pretty_task Task::List::last;
}

=head2 push

Pushes a sub-task onto the task stack.

  task push sub-task

=cut
sub push {
    note "push", shift;
    sync;
    respond_long "Started " . pretty_task Task::List::last;
}

=head2 pop

Pops a sub-task off the task stack.

  task pop
  task pop sub-task

=cut
sub pop {
    note "pop", shift;
    sync;
    respond_long "Stopped " . pretty_task Task::List::last;
}

=head2 pause

Pause tasks

  task pause

=cut
sub pause {
    note "pause";
    sync;
    respond undef, "Paused " . pretty_task Task::List::last;
}

=head2 resume

Resume paused tasks

  task resume

=cut
sub resume {
    note "resume";
    sync;
    respond undef, "Resumed " . pretty_task Task::List::last;
}

=head2 reset

Reset the timer for a task (and removes all subtasks).

  task reset label

=cut
sub reset {
    my ($label) = @_ or die "No task specified to reset";
    my ($tasks, $running) = tasks();
    die "No task called $label" unless $tasks->{label};
    note "reset $label";
    say "Reset $label";
}

=head2 list

List all the tasks.

  task list

=cut
sub list {
    my $level;
    $level = sub {
        my ($tasks, $prefix) = @_;
        for my $task (sort { $a->{label} cmp $b->{label} } values %$tasks) {
            respond_long $prefix . pretty_task $task;
            &$level($task->{subtasks}, "$prefix\t");
        }
    };
    sync;
    Task::List::add(undef, "stop");
    &$level(Task::List::all, "");
}

=head2 flush

Archive the log so we can start a new one.

  task flush

=cut
sub flush {
    try { Task::Log::archive } catch { die "No log to flush" };
    respond undef, "Flushed log";
}

=head2 time

=cut
sub time {
    my ($label) = @_;
}

sub dump {
    sync;
    respond undef, Dumper Task::List::all, Task::List::running;
}

=head1 DESCRIPTION

This program times and logs tasks using a serries of log files stored in the log directory. 

=head1 CONFIGURATION

Configuration is taken from environment variables, ~/.task-timer, /etc/task-timer, in that order. The following variables can be used:

=head2 LOG_DIRECTORY

The directory to store logs in. The default is C<log/> relative to where the script is.

=head2 LOG_FILE

The file name to use for the log file. The default is C<current>.

=head2 SHORT

Can be set to change the output to be more suitable for use with scripts.

=head1 AUTHOR

Erik J. Sturcke

=cut
